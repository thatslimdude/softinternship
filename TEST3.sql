--Create account Table
CREATE TABLE account_table(
    account_number VARCHAR2(250),
    account_name VARCHAR2(250),
    account_balance NUMBER,
    PRIMARY KEY (account_number)
);


--Create fund transfer procedure
CREATE OR REPLACE PROCEDURE fund_transfer(p_from_account IN VARCHAR2(250),p_to_account IN VARCHAR2(250),p_amount IN NUMBER) 
AS v_balance NUMBER;
v_count NUMBER;
BEGIN
    SELECT COUNT(*) INTO v_count FROM account_table WHERE account_number=p_from_account and account_number=p_to_account;
    IF v_count>0 THEN
        IF p_amount >0 THEN
        SELECT account_balance INTO v_balance FROM account_table WHERE account_number=p_from_account;
            IF v_balance > p_amount THEN
            UPDATE account_table SET account_balance= account_balance - p_amount WHERE account_number=p_from_account;
            UPDATE account_table SET account_balance= account_balance + p_amount WHERE account_number=p_to_acccount;
            SAVEPOINT;
            ELSE
            DBMS_OUTPUT.PUT_LINE('Insufficient Funds');
            ROLLBACK;
            END IF;
        ELSE 
        DBMS_OUTPUT.PUT_LINE('Amount must be postive please');
        END IF;
    ELSE
    DBMS_OUTPUT.PUT_LINE('Invalid account Inputed');  
    END IF;
    

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No Data Found');  
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
END;
/

--Function to get summary
CREATE OR REPLACE FUNCTION get_account_summary(p_acct_no IN VARCHAR2(250)) RETURN NUMBER AS
v_name VARCHAR2(250);
v_balance NUMBER;
BEGIN
    SELECT account_name, account_balance INTO v_name , v_balance FROM account_table where account_number=p_acct_no;
    DBMS_OUTPUT.PUT_LINE('This is the summary for ' || v_name || ' With balance:'|| v_balance);

    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Account does not exist');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
END;
/

--Procedure Using Cursor
CREATE OR REPLACE PROCEDURE interest_balance IS
CURSOR balance_cur IS 
SELECT account_balance FROM account_table;
BEGIN
    FOR rec IN balance_cur
    LOOP
        UPDATE account_table SET account_balance=account_balance* 0.05;
    END LOOP;
END;
/

--Create logging table
CREATE TABLE account_audit_log(
    log_id NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 INCREMENT BY 1),
    account_number VARCHAR2(250),
    old_balance NUMBER,
    new_balance NUMBER,
    modified_on DATE DEFAULT SYSDATE,
    PRIMARY KEY(log_id)
);


--Create trigger
CREATE OR REPLACE TRIGGER trg_audit_transaction
AFTER UPDATE ON account_table
FOR EACH ROW
BEGIN
    INSERT INTO account_audit_log (account_number,old_balance,new_balance) VALUES (:NEW.account_number,:OLD.account_balance,:NEW.account_balance);
END;
/

--Create withdraw procedure
CREATE OR REPLACE PROCEDURE withdraw(p_account_number IN VARCHAR2(250),p_amount IN NUMBER) AS
v_balance NUMBER;
low_balance_exception EXCEPTION;
BEGIN
    IF p_amount > 0 THEN
        UPDATE account_table SET account_balance= account_balance - p_amount WHERE account_number=p_account_number;
        SAVEPOINT;
        SELECT account_balance INTO v_balance FROM account_table WHERE account_number=p_account_number;
        IF v_balance< 1000 THEN
        --Custom Exception
        RAISE low_balance_exception;
        ROLLBACK;
        END IF;
        
    ELSE 
    DBMS_OUTPUT.PUT_LINE('Amount must be positive');
    END IF;

    EXCEPTION
    WHEN low_balance_exception THEN
    DBMS_OUTPUT.PUT_LINE('Account Balance cannot be less than 1000');
    WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Account does not exist');
    WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('ERROR'|| SQLERRM);
END;
/





